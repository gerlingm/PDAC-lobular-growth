# default parameters
seurat_object
seurat_object<-NormalizeData(seurat_object)
seurat_object<-FindVariableFeatures(seurat_object, selection.method = "vst", nfeatures=2000)
all.genes<-rownames(seurat_object)
seurat_object<-ScaleData(seurat_object, features=all.genes)
library(usethis)
usethis::edit_r_environ()
Sys.setenv(R_MAX_VSIZE = 16e9)
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(tidyverse)
library(scDblFinder)
set.seed(123)
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(ggplot2)
library(ggbreak)
library(viridis)
library(ggVennDiagram)
library(BioVenn)
library(UCell)
library(wesanderson)
library(ggpubr)
dirs <-  list.dirs(path = '/Users/sara.soderqvist/Library/CloudStorage/OneDrive-KarolinskaInstitutet/Writing_/Adaptive PDAC paper/Code/scdata analysis/human sc datasets/CRA001160_1/input', recursive = F, full.names = F) #Adjust path name
for (x in dirs){
cts <- ReadMtx(mtx= paste0('./input/', x, '/matrix.mtx'),
features = paste0('./input/', x, '/genes.tsv'),
cells=paste0('./input/', x, '/barcodes.tsv'))
assign(x, CreateSeuratObject(counts = cts, min.cells = 3, project = x))
}
# merge object
seurat_object <- merge(T1, y=c(T10,
T11,T12,T13,T14,T15,T16,T17,T18,T19,T2,
T20,T21,T22,T23,T24,T3,T4,T5,T6,T7,T8,T9),
add.cell.ids=c(ls()[3:26]))
seurat_object <- JoinLayers(seurat_object)
# identity
unique(seurat_object@meta.data$orig.ident) # control identity
# cell id
seurat_object@meta.data$cell_id <- rownames(seurat_object@meta.data)
# percent mt
seurat_object[["percent.mt"]]<-PercentageFeatureSet(seurat_object, pattern="^MT-")
plot1 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
seurat_object
head(seurat_object)
# parameters from the publication
seurat_object <- subset(seurat_object, subset = percent.mt < 10 & nFeature_RNA > 200)
head(seurat_object)
seurat_object
plot3 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot4 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot3 + plot4
# read in files
cell_identities <- read.table('./metadata/all_celltype.txt', sep = '\t', header = T)
clinical_data <- readxl::read_xls('./metadata/41422_2019_195_MOESM7_ESM.xls', col_names = T, skip = 1)
head(cell_identities)
head(clinical_data)
clinical_data$orig.ident <- gsub('PUMCH-','', clinical_data$Number)
clinical_data$`TNM Classification` <- gsub('N.*','', clinical_data$`TNM Classification`)
clinical_data$`TNM Classification` <- gsub('c','', clinical_data$`TNM Classification`)
clinical_data <- clinical_data%>%
filter(clinical_data$orig.ident%in%seurat_object@meta.data$orig.ident)
unique(clinical_data$orig.ident)
unique(clinical_data$`TNM Classification`)
# add metadata
seurat_object@meta.data$cell_id <- gsub('-1', '', seurat_object@meta.data$cell_id)
seurat_object@meta.data$cell_type <- ifelse(seurat_object@meta.data$cell_id %in% cell_identities$cell_id, cell_identities$cluster[match(seurat_object@meta.data$cell_id, cell_identities$cell_id)], 'not assigned') # some cells were excluded in the original publication and does not have the identity
seurat_object@meta.data$patho_diag <- ifelse(seurat_object@meta.data$orig.ident %in% clinical_data$orig.ident, clinical_data$`pathologic diagnoses`[match(seurat_object@meta.data$orig.ident, clinical_data$orig.ident)], NA)
seurat_object@meta.data$stage <- ifelse(seurat_object@meta.data$orig.ident %in% clinical_data$orig.ident, clinical_data$Staging[match(seurat_object@meta.data$orig.ident, clinical_data$orig.ident)], NA)
seurat_object@meta.data$T_status <- ifelse(seurat_object@meta.data$orig.ident %in% clinical_data$orig.ident, clinical_data$`TNM Classification`[match(seurat_object@meta.data$orig.ident, clinical_data$orig.ident)], NA)
seurat_object@meta.data$tumor_MaxDiam_mm <- ifelse(seurat_object@meta.data$orig.ident %in% clinical_data$orig.ident, clinical_data$`Maximum Diameter(mm)`[match(seurat_object@meta.data$orig.ident, clinical_data$orig.ident)], NA)
# T-stage by tumor size
seurat_object@meta.data$tumor_size_cat <- ifelse(seurat_object@meta.data$tumor_MaxDiam_mm<=20, 'T1',
ifelse(seurat_object@meta.data$tumor_MaxDiam_mm>20&seurat_object@meta.data$tumor_MaxDiam_mm<=40, 'T2',
ifelse(seurat_object@meta.data$tumor_MaxDiam_mm>40, 'T3', 'None')))
seurat_object@meta.data$tumor_size_cat <- factor(seurat_object@meta.data$tumor_size_cat, levels=c('T1', 'T2', 'T3'))
# sanity check
unique(seurat_object@meta.data$cell_type)
unique(cell_identities$cluster)
nrow(seurat_object@meta.data[seurat_object@meta.data$cell_type=='not assigned',])
unique(seurat_object@meta.data$patho_diag)
unique(seurat_object@meta.data$stage)
unique(seurat_object@meta.data$tumor_MaxDiam_mm)
table(seurat_object@meta.data$tumor_size_cat, seurat_object@meta.data$tumor_MaxDiam_mm)
unique(seurat_object@meta.data$tumor_size_cat)
head(seurat_object)
# If needed: run line 168 to increase memory
# Sys.setenv(R_MAX_VSIZE = 16e9)
# default parameters
seurat_object
seurat_object<-NormalizeData(seurat_object)
seurat_object<-FindVariableFeatures(seurat_object, selection.method = "vst", nfeatures=2000)
all.genes<-rownames(seurat_object)
seurat_object<-ScaleData(seurat_object, features=all.genes)
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(tidyverse)
library(scDblFinder)
set.seed(123)
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(ggplot2)
library(ggbreak)
library(viridis)
library(ggVennDiagram)
library(BioVenn)
library(UCell)
library(wesanderson)
library(ggpubr)
dirs <-  list.dirs(path = '/Users/sara.soderqvist/Library/CloudStorage/OneDrive-KarolinskaInstitutet/Writing_/Adaptive PDAC paper/Code/scdata analysis/human sc datasets/CRA001160_1/input', recursive = F, full.names = F) #Adjust path name
for (x in dirs){
cts <- ReadMtx(mtx= paste0('./input/', x, '/matrix.mtx'),
features = paste0('./input/', x, '/genes.tsv'),
cells=paste0('./input/', x, '/barcodes.tsv'))
assign(x, CreateSeuratObject(counts = cts, min.cells = 3, project = x))
}
# merge object
seurat_object <- merge(T1, y=c(T10,
T11,T12,T13,T14,T15,T16,T17,T18,T19,T2,
T20,T21,T22,T23,T24,T3,T4,T5,T6,T7,T8,T9),
add.cell.ids=c(ls()[3:26]))
seurat_object <- JoinLayers(seurat_object)
# identity
unique(seurat_object@meta.data$orig.ident) # control identity
# cell id
seurat_object@meta.data$cell_id <- rownames(seurat_object@meta.data)
# percent mt
seurat_object[["percent.mt"]]<-PercentageFeatureSet(seurat_object, pattern="^MT-")
plot1 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
seurat_object
head(seurat_object)
# parameters from the publication
seurat_object <- subset(seurat_object, subset = percent.mt < 10 & nFeature_RNA > 200)
head(seurat_object)
seurat_object
plot3 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot4 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot3 + plot4
# read in files
cell_identities <- read.table('./metadata/all_celltype.txt', sep = '\t', header = T)
clinical_data <- readxl::read_xls('./metadata/41422_2019_195_MOESM7_ESM.xls', col_names = T, skip = 1)
head(cell_identities)
head(clinical_data)
clinical_data$orig.ident <- gsub('PUMCH-','', clinical_data$Number)
clinical_data$`TNM Classification` <- gsub('N.*','', clinical_data$`TNM Classification`)
clinical_data$`TNM Classification` <- gsub('c','', clinical_data$`TNM Classification`)
clinical_data <- clinical_data%>%
filter(clinical_data$orig.ident%in%seurat_object@meta.data$orig.ident)
unique(clinical_data$orig.ident)
unique(clinical_data$`TNM Classification`)
# add metadata
seurat_object@meta.data$cell_id <- gsub('-1', '', seurat_object@meta.data$cell_id)
seurat_object@meta.data$cell_type <- ifelse(seurat_object@meta.data$cell_id %in% cell_identities$cell_id, cell_identities$cluster[match(seurat_object@meta.data$cell_id, cell_identities$cell_id)], 'not assigned') # some cells were excluded in the original publication and does not have the identity
seurat_object@meta.data$patho_diag <- ifelse(seurat_object@meta.data$orig.ident %in% clinical_data$orig.ident, clinical_data$`pathologic diagnoses`[match(seurat_object@meta.data$orig.ident, clinical_data$orig.ident)], NA)
seurat_object@meta.data$stage <- ifelse(seurat_object@meta.data$orig.ident %in% clinical_data$orig.ident, clinical_data$Staging[match(seurat_object@meta.data$orig.ident, clinical_data$orig.ident)], NA)
seurat_object@meta.data$T_status <- ifelse(seurat_object@meta.data$orig.ident %in% clinical_data$orig.ident, clinical_data$`TNM Classification`[match(seurat_object@meta.data$orig.ident, clinical_data$orig.ident)], NA)
seurat_object@meta.data$tumor_MaxDiam_mm <- ifelse(seurat_object@meta.data$orig.ident %in% clinical_data$orig.ident, clinical_data$`Maximum Diameter(mm)`[match(seurat_object@meta.data$orig.ident, clinical_data$orig.ident)], NA)
# T-stage by tumor size
seurat_object@meta.data$tumor_size_cat <- ifelse(seurat_object@meta.data$tumor_MaxDiam_mm<=20, 'T1',
ifelse(seurat_object@meta.data$tumor_MaxDiam_mm>20&seurat_object@meta.data$tumor_MaxDiam_mm<=40, 'T2',
ifelse(seurat_object@meta.data$tumor_MaxDiam_mm>40, 'T3', 'None')))
seurat_object@meta.data$tumor_size_cat <- factor(seurat_object@meta.data$tumor_size_cat, levels=c('T1', 'T2', 'T3'))
# sanity check
unique(seurat_object@meta.data$cell_type)
unique(cell_identities$cluster)
nrow(seurat_object@meta.data[seurat_object@meta.data$cell_type=='not assigned',])
unique(seurat_object@meta.data$patho_diag)
unique(seurat_object@meta.data$stage)
unique(seurat_object@meta.data$tumor_MaxDiam_mm)
table(seurat_object@meta.data$tumor_size_cat, seurat_object@meta.data$tumor_MaxDiam_mm)
unique(seurat_object@meta.data$tumor_size_cat)
head(seurat_object)
# default parameters
seurat_object
seurat_object<-NormalizeData(seurat_object)
seurat_object<-FindVariableFeatures(seurat_object, selection.method = "vst", nfeatures=2000)
all.genes<-rownames(seurat_object)
seurat_object<-ScaleData(seurat_object, features=all.genes)
seurat_object <- RunPCA(seurat_object, features = VariableFeatures(object = seurat_object))
ElbowPlot(seurat_object)
seurat_object <- FindNeighbors(seurat_object, dims = 1:10)
seurat_object <- FindClusters(seurat_object, resolution = 0.8)
seurat_object <- RunUMAP(seurat_object, dims = 1:10)
DimPlot(seurat_object, reduction='pca', label = TRUE)
# check marker expression
seurat_object@meta.data$cell_type <- factor(seurat_object@meta.data$cell_type, levels = c("Ductal cell type 1", "Ductal cell type 2", "Acinar cell",
"Endocrine cell", "Endothelial cell", "Fibroblast cell",
"Stellate cell", "Macrophage cell", "T cell", "B cell", "not assigned"))
Idents(seurat_object) <- 'cell_type'
VlnPlot(seurat_object, features = c('MMP7', 'CFTR', 'AMBP', #ductal 1
'MUC1', 'KRT19', 'KRT7', 'TSPAN8', 'SLPI',  # tumor / ductal 2
'PRSS1',  'CELA3A', 'CTRB1', 'CTRB2', 'REG1B', #acinar
'CHGB', 'CHGA', 'INS', 'IAPP', # endocrine
'CDH5', 'PLVAP', 'VWF', 'CLDN5', # endothelial
'LUM', 'COL1A1', 'DCN', #fibroblasts
'RGS5', 'ACTA2', 'PDGFRB', 'ADIRF', # Stellate
'AIF1', 'CD64', 'CD14', 'CD68', #macrophages
'CD3D', 'CD3E', 'CD4', 'CD8',# T cells
'MS4A1', 'CD79A', 'CD79B', 'CD52' # B cells
), pt.size = 0, ncol = 10)
FeaturePlot(seurat_object, features = c('MMP7', 'CFTR', 'AMBP', #ductal 1
'MUC1', 'KRT19', 'KRT7', 'TSPAN8', 'SLPI',  # tumor / ductal 2
'PRSS1',  'CELA3A', 'CTRB1', 'CTRB2', 'REG1B', #acinar
'CHGB', 'CHGA', 'INS', 'IAPP', # endocrine
'CDH5', 'PLVAP', 'VWF', 'CLDN5', # endothelial
'LUM', 'COL1A1', 'DCN', #fibroblasts
'RGS5', 'ACTA2', 'PDGFRB', 'ADIRF', # Stellate
'AIF1', 'CD64', 'CD14', 'CD68', #macrophages
'CD3D', 'CD3E', 'CD4', 'CD8',# T cells
'MS4A1', 'CD79A', 'CD79B', 'CD52' # B cells
), ncol = 10)
DimPlot(seurat_object, label = TRUE, group.by = 'cell_type')
DimPlot(seurat_object, label = TRUE, group.by = 'orig.ident')
# save for easier import
saveRDS(seurat_object, file = "./output/CRA001160_preprocessed.rds")
# read in the seurat file
seurat_object <- readRDS("./output/CRA001160_preprocessed.rds")
head(seurat_object)
# subset fibroblasts
fibroblasts <- subset(seurat_object, idents = c("Fibroblast cell"))
# save for easier import
saveRDS(fibroblasts, file = "./output/CRA001160_fibroblasts.rds")
# subset to tumor cells
tumor <- subset(seurat_object, idents = c("Ductal cell type 2"))
# save for easier import
saveRDS(tumor, file = "./output/CRA001160_tumor.rds")
fibroblasts <- readRDS("./output/CRA001160_fibroblasts.rds")
head(fibroblasts)
p1 <- DimPlot(fibroblasts, reduction = 'umap', group.by = 'cell_type', label = TRUE)
p2 <- DimPlot(fibroblasts, reduction = 'umap', group.by = 'orig.ident')#, split.by = 'orig.ident')
p1+p2
#Ngfr+ cells
Ngfr_fibroblasts <- WhichCells(subset(x = fibroblasts, subset = NGFR > 0))
Ngfr_fibroblasts <- gsub('-1','', Ngfr_fibroblasts)
fibroblasts@meta.data$Ngfr_status <- ifelse(fibroblasts@meta.data$cell_id%in%Ngfr_fibroblasts, 'NGFR+', 'NGFR-')
# sanity check
nrow(fibroblasts@meta.data[fibroblasts@meta.data$Ngfr_status=='NGFR+',])
nrow(fibroblasts@meta.data[fibroblasts@meta.data$Ngfr_status=='NGFR-',])
fibroblasts
Idents(fibroblasts) <- 'Ngfr_status'
Ngfr.markers_all <- FindAllMarkers(fibroblasts, only.pos = FALSE)
Ngfr.markers <- FindMarkers(fibroblasts, ident.1 = "NGFR+", ident.2 = "NGFR-", verbose = FALSE)
head(Ngfr.markers, n = 20)
Ngfr.markers
gene_ls.up <- rownames(Ngfr.markers[Ngfr.markers$avg_log2FC>1 & Ngfr.markers$p_val_adj<0.01,])
GO_results <- enrichGO(gene=gene_ls.up, OrgDb = "org.Hs.eg.db", keyType = 'SYMBOL', ont = "BP")
result_df <- as.data.frame(GO_results)
result_df <- result_df[order(result_df$FoldEnrichment, decreasing = T),]
result_df
top15 <- result_df[1:30,]
top15 <- top15[order(top15$FoldEnrichment, decreasing = F),]
# lollipop plot
ggplot(top15, aes(x = factor(Description, levels= unique(Description)), y = FoldEnrichment, color=p.adjust)) +
geom_segment(aes(xend = Description, yend = 0)) +
geom_point(aes(size = Count)) +
scale_color_viridis(option = "C", direction=1, begin=0.2, end = 1, limits=c(0,0.05)) +
coord_flip() +
labs(
x = "",
y = "FoldEnrichment",
title = "",
size = "Gene Count"
) +
theme_minimal()
CAFs <- c('NGFR', 'PDGFRA', 'ACTA2', 'CD74')
# Identify cells expressing selected genes in each cluster
fibroblast_genes <- FetchData(fibroblasts, vars = CAFs, layer = "scale.data")
count_matrix <- t(fibroblast_genes)
# Extract expressed genes as a list
expressed_genes <- apply(count_matrix, 1, function(counts) {
genes_expressed <- colnames(count_matrix)[counts > 0]
genes_expressed
})
#subset list to only Ngfr+ cells
Ngfr_cells <- expressed_genes$NGFR
Ngfr_expressed <- lapply(expressed_genes, function(x) x[x %in% Ngfr_cells])
# Venn diagram
venn <- Ngfr_expressed[c(-1)]
venn_plot_data <- process_data(Venn(venn[-4]), shape_id = '301')
v <- plot_venn(venn_plot_data)+#, label = 'percent', order.intersect.by = 'name')+
scale_fill_distiller(palette = "YlGnBu")+
theme_void()
v
# proportional venn
draw.venn(venn$ACTA2, venn$PDGFRA, venn$CD74, title = '', nrtype="abs",
xtitle = 'ACTA2', ytitle = 'PDGFRA', ztitle = 'CD74')
# CAF signatures
iCAF <- read_lines('/signature genes/iCAF_genelist_Elyada2020.txt')
# CAF signatures
iCAF <- read_lines('/signature genes/iCAF_genelist_Elyada2020.txt')
getwd()
setwd("/Users/sara.soderqvist/Library/CloudStorage/OneDrive-KarolinskaInstitutet/Writing_/Adaptive PDAC paper/Code/scdata analysis/human sc datasets")
# CAF signatures
iCAF <- read_lines('/signature genes/iCAF_genelist_Elyada2020.txt')
setwd("/Users/sara.soderqvist/Library/CloudStorage/OneDrive-KarolinskaInstitutet/Writing_/Adaptive PDAC paper/Code/scdata analysis/human sc datasets")
# CAF signatures
iCAF <- read_lines('/signature genes/iCAF_genelist_Elyada2020.txt')
setwd("/Users/sara.soderqvist/Library/CloudStorage/OneDrive-KarolinskaInstitutet/Writing_/Adaptive PDAC paper/Code/scdata analysis/human sc datasets")
getwd()
# CAF signatures
iCAF <- read_lines('/signature genes/iCAF_genelist_Elyada2020.txt')
setwd("/Users/sara.soderqvist/Library/CloudStorage/OneDrive-KarolinskaInstitutet/Writing_/Adaptive PDAC paper/Code/scdata analysis/human sc datasets")
getwd()
# CAF signatures
iCAF <- read_lines('./signature genes/iCAF_genelist_Elyada2020.txt')
apCAF <- c('CD74', 'HLA-DRA', 'HLA-DPA1', 'HLA-DQA1', 'SLPI')
myCAF <- read_lines('/signature genes/myCAF_genelist_Elyada2020.txt')
setwd("/Users/sara.soderqvist/Library/CloudStorage/OneDrive-KarolinskaInstitutet/Writing_/Adaptive PDAC paper/Code/scdata analysis/human sc datasets")
getwd()
# CAF signatures
iCAF <- read_lines('./signature genes/iCAF_genelist_Elyada2020.txt')
apCAF <- c('CD74', 'HLA-DRA', 'HLA-DPA1', 'HLA-DQA1', 'SLPI')
myCAF <- read_lines('./signature genes/myCAF_genelist_Elyada2020.txt')
moffit <- readxl::read_xlsx('/signature genes/subtype_signatures.xlsx', col_names = T, sheet = 'Moffit sign. genes fig 3A')
setwd("/Users/sara.soderqvist/Library/CloudStorage/OneDrive-KarolinskaInstitutet/Writing_/Adaptive PDAC paper/Code/scdata analysis/human sc datasets")
getwd()
# CAF signatures
iCAF <- read_lines('./signature genes/iCAF_genelist_Elyada2020.txt')
apCAF <- c('CD74', 'HLA-DRA', 'HLA-DPA1', 'HLA-DQA1', 'SLPI')
myCAF <- read_lines('./signature genes/myCAF_genelist_Elyada2020.txt')
moffit <- readxl::read_xlsx('./signature genes/subtype_signatures.xlsx', col_names = T, sheet = 'Moffit sign. genes fig 3A')
# gene signature scoring
iCAF[78] <- 'IL8' # alias for CXCL8
signatures <- list(Ngfr_sign=gene_ls.up,
iCAFs=iCAF,
apCAFs=apCAF,
myCAFs=myCAF,
Moffit_stroma_act_all=moffit$stroma_activated_all[!is.na(moffit$stroma_activated_all)],
Moffit_stroma_norm_all=moffit$normal_stroma_all[!is.na(moffit$normal_stroma_all)])
fibroblasts <- AddModuleScore_UCell(fibroblasts,
features=signatures, name=NULL)
# control how many genes are present in the data set
length(intersect(iCAF, rownames(fibroblasts)))/length(iCAF)
length(intersect(apCAF, rownames(fibroblasts)))/length(apCAF)
length(intersect(myCAF, rownames(fibroblasts)))/length(myCAF)
length(intersect(moffit$stroma_activated_all, rownames(fibroblasts)))/length(moffit$stroma_activated_all)
length(intersect(moffit$normal_stroma_all, rownames(fibroblasts)))/length(moffit$normal_stroma_all)
cols <- wes_palette("GrandBudapest1", n = 4)
p1 <- VlnPlot(fibroblasts, features = 'Ngfr_sign', group.by = 'tumor_size_cat',cols=cols[-1], pt.size = 0)
p2 <- VlnPlot(fibroblasts, features = 'iCAFs', group.by = 'tumor_size_cat',cols=cols[-1], pt.size = 0)
p3 <- VlnPlot(fibroblasts, features = 'apCAFs', group.by = 'tumor_size_cat',cols=cols[-1], pt.size = 0)
p4 <- VlnPlot(fibroblasts, features = 'myCAFs', group.by = 'tumor_size_cat',cols=cols[-1], pt.size = 0)
p5 <- VlnPlot(fibroblasts, features = 'Moffit_stroma_act_all', group.by = 'tumor_size_cat',cols=cols[-1], pt.size = 0)
p6 <- VlnPlot(fibroblasts, features = 'Moffit_stroma_norm_all', group.by = 'tumor_size_cat',cols=cols[-1], pt.size = 0)
# PDAC subtype signatures
tumor <- readRDS("./output/CRA001160_tumor.rds")
tumor
# gene signature scoring
signatures <- list(Moffit_Classical_all=moffit$Classical_all[!is.na(moffit$Classical_all)],
Moffit_Basal_all=moffit$Basal_all[!is.na(moffit$Basal_all)])
tumor <- AddModuleScore_UCell(tumor, features=signatures, name=NULL)
# control how many genes are present in the data set
length(intersect(moffit$Classical_all[!is.na(moffit$Classical_all)], rownames(tumor)))/length(moffit$Classical_all[!is.na(moffit$Classical_all)])
length(intersect(moffit$Basal_all[!is.na(moffit$Basal_all)], rownames(tumor)))/length(moffit$Basal_all[!is.na(moffit$Basal_all)])
p7 <- VlnPlot(tumor, features = 'Moffit_Classical_all', group.by = 'tumor_size_cat',cols=cols[-1], pt.size = 0)
p8 <- VlnPlot(tumor, features = 'Moffit_Basal_all', group.by = 'tumor_size_cat',cols=cols[-1], pt.size = 0)
p7+p8
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(dplyr)
library(tidyverse)
library(scDblFinder)
set.seed(123)
dirs <-  list.dirs(path = './input/', recursive = F, full.names = F)
for (x in dirs){
cts <- ReadMtx(mtx= paste0('./input/', x, '/matrix.mtx.gz'),
features = paste0('./input/', x, '/features.tsv.gz'),
cells=paste0('./input/', x, '/barcodes.tsv.gz'))
assign(x, CreateSeuratObject(counts = cts, min.cells = 3, project = x))
}
# merge object
seurat_object <- merge(GSM5831620_5_GEX_4, y=c(GSM5831621_5_GEX_5,GSM5831622_5_GEX_6, GSM5831623_5_GEX_9,GSM5831624_GEX_45_MM),
add.cell.ids=c(ls()[3:7]))
# create columns for metadata
# identity
unique(seurat_object@meta.data$orig.ident) # control identity
# cell id
seurat_object@meta.data$cell_id <- rownames(seurat_object@meta.data)
# percent mt
seurat_object[["percent.mt"]]<-PercentageFeatureSet(seurat_object, pattern="^MT-")
plot1 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
# parameters from the publication
seurat_object <- subset(seurat_object, subset = percent.mt < 10 & nCount_RNA > 2000 & nFeature_RNA > 500 & nFeature_RNA < 7000)
head(seurat_object)
seurat_object
plot1 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
# double check filtering
min(seurat_object@meta.data$nFeature_RNA)
max(seurat_object@meta.data$nFeature_RNA)
min(seurat_object@meta.data$nCount_RNA)
max(seurat_object@meta.data$percent.mt)
for (i in c("GSM5831620_5_GEX_4","GSM5831621_5_GEX_5","GSM5831622_5_GEX_6","GSM5831623_5_GEX_9","GSM5831624_GEX_45_MM")){
sub <- subset(seurat_object, subset = orig.ident == i)
eval(parse(text=paste("sceDblF_",i," <- scDblFinder(GetAssayData(sub, layer = 'counts'), dbr = 0.07)",sep="")))
eval(parse(text=paste("score.",i," <- sceDblF_",i,"@colData@listData[['scDblFinder.score']]",sep="")))
eval(parse(text=paste("names(score.",i,") <- rownames(sceDblF_",i,"@colData)",sep="")))
}
doublets.info <- rbind(sceDblF_GSM5831620_5_GEX_4@colData,sceDblF_GSM5831621_5_GEX_5@colData,sceDblF_GSM5831622_5_GEX_6@colData,
sceDblF_GSM5831623_5_GEX_9@colData,sceDblF_GSM5831624_GEX_45_MM@colData)
seurat_object$is.doublet <- doublets.info$scDblFinder.class
seurat_object <- subset(seurat_object, subset = is.doublet == 'singlet')
# default parameters
seurat_object<-NormalizeData(seurat_object)
seurat_object<-FindVariableFeatures(seurat_object, selection.method = "vst", nfeatures=2000)
all.genes<-rownames(seurat_object)
seurat_object<-ScaleData(seurat_object, features=all.genes)
seurat_object <- RunPCA(seurat_object, features = VariableFeatures(object = seurat_object))
seurat_object <- RunUMAP(seurat_object, reduction='pca', dims = 1:20)
seurat_object <- FindNeighbors(seurat_object, reduction = 'pca', dims = 1:50)
seurat_object <- FindClusters(seurat_object, resolution = c(0.4))
DimPlot(seurat_object, reduction='pca', label = TRUE)
DimPlot(seurat_object, label = TRUE)
p1 <- DimPlot(seurat_object, reduction = 'umap')
p2 <- DimPlot(seurat_object, reduction = 'umap',  group.by = c("orig.ident"))
p1+p2
seurat_object <- IntegrateLayers(object = seurat_object, method = CCAIntegration, assay = "RNA", orig.reduction = "pca", new.reduction = "integrated.cca",
scale.layer = "scale.data",verbose = FALSE)
seurat_object <- RunUMAP(seurat_object, reduction='integrated.cca', dims = 1:50)
seurat_object <- FindNeighbors(seurat_object, reduction = 'integrated.cca', dims = 1:50)
seurat_object <- FindClusters(seurat_object, resolution = 0.3)
DimPlot(seurat_object, label = TRUE)
p1 <- DimPlot(seurat_object, reduction = 'umap', label = T)
p2 <- DimPlot(seurat_object, reduction = 'umap',  group.by = c("orig.ident"))
p1+p2
# fibroblast/CAF markers/endothelial cells
VlnPlot(seurat_object, features = toupper(c("Col1a1", "Col1a2", "Col3a1",
"Ngfr", "Pdgfra", "Acta2", "Cd74", "Plvap")))
# tumor markers
VlnPlot(seurat_object, features = toupper(c("Epcam",  "Krt8", "Krt7", "Krt19",  "Top2a", "Gata6", "Hmga2")))
#acinar/ductal/ADM
VlnPlot(seurat_object, features = toupper(c("Krt19", "Cftr",  "Cpb1", "Cpa1", "Cela2a", "Sox9", "Mcam", "Spp1", "Reg3a", "Crp", "Plvap")))
# fibroblasts/ CAF markers/ endothelial cells
FeaturePlot(seurat_object, features = toupper(c("Col1a1", "Col1a2", "Col3a1",
"Ngfr", "Pdgfra", "Acta2", "Cd74", "Plvap")))
#acinar/ductal/ADM
FeaturePlot(seurat_object, features = toupper(c("Krt19", "Cftr",  "Cpb1", "Cpa1", "Cela2a", "Sox9", "Mcam", "Spp1", "Reg3a", "Crp", "Plvap")))
# tumor
FeaturePlot(seurat_object, features = toupper(c("Epcam",  "Krt8", "Krt7", "Krt19",  "Top2a", "Hmga2", "Gata6")))
# marker's from the paper
Ep <- c("EPCAM","ZBED6", "VGLL1", "TRIM54", "PIFO", "MSMB", "KRT6A", "FXYD2", "CDK1")
Fb <- c("COL1A1" , "VIT", "STRA6", "SFRP1", "MSLN", "LRRC15", "COL9A1", "CDK1")
VlnPlot(seurat_object, features = c(Fb, "PLVAP"))
VlnPlot(seurat_object, features = Ep)
FeaturePlot(seurat_object, features = c(Fb, "PLVAP"))
FeaturePlot(seurat_object, features = Ep)
# rename identified clusters
seurat_object <- RenameIdents(object = seurat_object, `1` = "Fibroblasts_1")
seurat_object <- RenameIdents(object = seurat_object, `2` = "Fibroblasts_2")
seurat_object <- RenameIdents(object = seurat_object, `4` = "Endothelial")
seurat_object <- RenameIdents(object = seurat_object, `5` = "Stellate")
seurat_object <- RenameIdents(object = seurat_object, `6` = "Fibroblasts_3")
seurat_object <- RenameIdents(object = seurat_object, `7` = "Fibroblasts_4")
seurat_object <- RenameIdents(object = seurat_object, `12` = "Fibroblasts_5")
seurat_object <- RenameIdents(object = seurat_object, `13` = "Fibroblasts_6")
str(seurat_object$orig.ident)
str(seurat_object$seurat_clusters)
# rename identified clusters
seurat_object <- RenameIdents(object = seurat_object, `1` = "Fibroblasts_1")
# rename identified clusters
#seurat_object <- RenameIdents(object = seurat_object, `1` = "Fibroblasts_1")
#seurat_object <- RenameIdents(object = seurat_object, `2` = "Fibroblasts_2")
#seurat_object <- RenameIdents(object = seurat_object, `4` = "Endothelial")
#seurat_object <- RenameIdents(object = seurat_object, `5` = "Stellate")
#seurat_object <- RenameIdents(object = seurat_object, `6` = "Fibroblasts_3")
#seurat_object <- RenameIdents(object = seurat_object, `7` = "Fibroblasts_4")
#seurat_object <- RenameIdents(object = seurat_object, `12` = "Fibroblasts_5")
seurat_object <- RenameIdents(object = seurat_object, `13` = "Fibroblasts_6")
levels(seurat_object)
knitr::opts_chunk$set(echo = TRUE)
# Extract all R script files in the repository:
r_files <- list.files(path = "/Users/sara.soderqvist/Library/CloudStorage/OneDrive-KarolinskaInstitutet/Writing_/Adaptive PDAC paper/Code", pattern = "\\.Rmd", recursive = TRUE, full.names = TRUE) # Here, please adjust to your own directory.
# Extract all the packages present in the given R scripts
get_packages <- function(file) {
lines <- readLines(file, warn = FALSE)
pkgs <- unlist(regmatches(lines, gregexpr("(?<=library\\(|require\\()[^\\)]+", lines, perl = TRUE)))
pkgs2 <- unlist(regmatches(lines, gregexpr("[a-zA-Z0-9\\.]+(?=::)", lines, perl = TRUE)))
unique(c(pkgs, pkgs2))
}
all_pkgs <- unique(unlist(lapply(r_files, get_packages)))
all_pkgs
all_pkgs
missing_pkgs <- setdiff(all_pkgs, rownames(installed.packages()))
if (length(missing_pkgs)) {
install.packages(missing_pkgs)
}
missing_pkgs <- setdiff(all_pkgs, rownames(installed.packages()))
if (length(missing_pkgs)) {
install.packages(missing_pkgs)
}
# If some package may not be available for your  version, which may happen, please try installing via Bioconductor:
#BiocManager::install("package_name", version = "add version")
BiocManager::install("org.Mm.eg.db")
lapply(all_pkgs, library, character.only = TRUE)
install.packages("renv")  # if not already installed
renv::init()
#Run by author:
renv::init()
renv::snapshot()
